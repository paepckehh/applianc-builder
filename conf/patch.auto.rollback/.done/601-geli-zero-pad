commit 0fcafe8516d170852aa73f029a6a28bed1e29292
Author: Mark Johnston <markj@FreeBSD.org>
Date:   2021-07-15 16:23:04 +0000

    eli: Zero pad bytes that arise when certain auth algorithms are used
    
    When authentication is configured, GELI ensures that the amount of data
    per sector is a multiple of 16 bytes.  This is done in
    eli_metadata_softc().  When the digest size is not a multiple of 16
    bytes, this leaves some extra pad bytes at the end of every sector, and
    they were not being zeroed before being written to disk.  In particular,
    this happens with the HMAC/SHA1, HMAC/RIPEMD160 and HMAC/SHA384 data
    authentication algorithms.
    
    This change ensures that they are zeroed before being written to disk.
    
    Reported by:    KMSAN
    Reviewed by:    delphij, asomers
    MFC after:      2 weeks
    Sponsored by:   The FreeBSD Foundation
    Differential Revision:  https://reviews.freebsd.org/D31170

diff --git a/sys/geom/eli/g_eli_integrity.c b/sys/geom/eli/g_eli_integrity.c
index e79ec136aa2..e97924b8df0 100644
--- a/sys/geom/eli/g_eli_integrity.c
+++ b/sys/geom/eli/g_eli_integrity.c
@@ -515,6 +515,17 @@ g_eli_auth_run(struct g_eli_worker *wr, struct bio *bp)
 			if (bp->bio_cmd == BIO_WRITE)
 				memset(data + sc->sc_alen + data_secsize, 0,
 				    encr_secsize - sc->sc_alen - data_secsize);
+		} else if (data_secsize + sc->sc_alen != encr_secsize) {
+			/*
+			 * If the HMAC size is not a multiple of 128 bits, the
+			 * per-sector data size is rounded down to ensure that
+			 * encryption can be performed without requiring any
+			 * padding.  In this case, each sector contains unused
+			 * bytes.
+			 */
+			if (bp->bio_cmd == BIO_WRITE)
+				memset(data + sc->sc_alen + data_secsize, 0,
+				    encr_secsize - sc->sc_alen - data_secsize);
 		}
 
 		if (bp->bio_cmd == BIO_WRITE) {
