commit 720dc6bcb5a8c4283802576e2ef54f42b33fa8d4
Author: Mitchell Horne <mhorne@FreeBSD.org>
Date:   2021-03-01 15:07:54 +0000

    Consolidate machine/endian.h definitions
    
    This change serves two purposes.
    
    First, we take advantage of the compiler provided endian definitions to
    eliminate some long-standing duplication between the different versions
    of this header. __BYTE_ORDER__ has been defined since GCC 4.6, so there
    is no need to rely on platform defaults or e.g. __MIPSEB__ to determine
    endianness. A new common sub-header is added, but there should be no
    changes to the visibility of these definitions.
    
    Second, this eliminates the hand-rolled __bswapNN() routines, again in
    favor of the compiler builtins. This was done already for x86 in
    e6ff6154d203. The benefit here is that we no longer have to maintain our
    own implementations on each arch, and can instead rely on the compiler
    to emit appropriate instructions or libcalls, as available. This should
    result in equivalent or better code generation. Notably 32-bit arm will
    start using the `rev` instruction for these routines, which is available
    on armv6+.
    
    PR:             236920
    Reviewed by:    arichardson, imp
    Tested by:      bdragon (BE powerpc)
    MFC after:      3 weeks
    Differential Revision:  https://reviews.freebsd.org/D29012

diff --git a/sys/arm/include/endian.h b/sys/arm/include/endian.h
index 5fb94db3b9b..eb3f0d14232 100644
--- a/sys/arm/include/endian.h
+++ b/sys/arm/include/endian.h
@@ -32,111 +32,10 @@
  * $FreeBSD$
  */
 
-#ifndef _ENDIAN_H_
-#define	_ENDIAN_H_
+#ifndef _MACHINE_ENDIAN_H_
+#define	_MACHINE_ENDIAN_H_
 
 #include <sys/_types.h>
+#include <sys/_endian.h>
 
-/*
- * Definitions for byte order, according to byte significance from low
- * address to high.
- */
-#define _LITTLE_ENDIAN  1234    /* LSB first: i386, vax */
-#define _BIG_ENDIAN     4321    /* MSB first: 68000, ibm, net */
-#define _PDP_ENDIAN     3412    /* LSB first in word, MSW first in long */
-
-#ifdef __ARMEB__
-#define _BYTE_ORDER	_BIG_ENDIAN
-#else
-#define	_BYTE_ORDER	_LITTLE_ENDIAN
-#endif /* __ARMEB__ */
-
-#if __BSD_VISIBLE
-#define LITTLE_ENDIAN   _LITTLE_ENDIAN
-#define BIG_ENDIAN      _BIG_ENDIAN
-#define PDP_ENDIAN      _PDP_ENDIAN
-#define BYTE_ORDER      _BYTE_ORDER
-#endif
-
-#ifdef __ARMEB__
-#define _QUAD_HIGHWORD 0
-#define _QUAD_LOWWORD 1
-#define __ntohl(x)	((__uint32_t)(x))
-#define __ntohs(x)	((__uint16_t)(x))
-#define __htonl(x)	((__uint32_t)(x))
-#define __htons(x)	((__uint16_t)(x))
-#else
-#define _QUAD_HIGHWORD  1
-#define _QUAD_LOWWORD 0
-#define __ntohl(x)        (__bswap32(x))
-#define __ntohs(x)        (__bswap16(x))
-#define __htonl(x)        (__bswap32(x))
-#define __htons(x)        (__bswap16(x))
-#endif /* __ARMEB__ */
-
-static __inline __uint64_t
-__bswap64(__uint64_t _x)
-{
-
-	return ((_x >> 56) | ((_x >> 40) & 0xff00) | ((_x >> 24) & 0xff0000) |
-	    ((_x >> 8) & 0xff000000) | ((_x << 8) & ((__uint64_t)0xff << 32)) |
-	    ((_x << 24) & ((__uint64_t)0xff << 40)) |
-	    ((_x << 40) & ((__uint64_t)0xff << 48)) | ((_x << 56)));
-}
-
-static __inline __uint32_t
-__bswap32_var(__uint32_t v)
-{
-	__uint32_t t1;
-
-	__asm __volatile("eor %1, %0, %0, ror #16\n"
-	    		"bic %1, %1, #0x00ff0000\n"
-			"mov %0, %0, ror #8\n"
-			"eor %0, %0, %1, lsr #8\n"
-			 : "+r" (v), "=r" (t1));
-
-	return (v);
-}
-
-static __inline __uint16_t
-__bswap16_var(__uint16_t v)
-{
-	__uint32_t ret = v & 0xffff;
-
-	__asm __volatile(
-	    "mov    %0, %0, ror #8\n"
-	    "orr    %0, %0, %0, lsr #16\n"
-	    "bic    %0, %0, %0, lsl #16"
-	    : "+r" (ret));
-
-	return ((__uint16_t)ret);
-}
-
-#ifdef __OPTIMIZE__
-
-#define __bswap32_constant(x)	\
-    ((((x) & 0xff000000U) >> 24) |	\
-     (((x) & 0x00ff0000U) >>  8) |	\
-     (((x) & 0x0000ff00U) <<  8) |	\
-     (((x) & 0x000000ffU) << 24))
-
-#define __bswap16_constant(x)	\
-    ((((x) & 0xff00) >> 8) |		\
-     (((x) & 0x00ff) << 8))
-
-#define __bswap16(x)	\
-    ((__uint16_t)(__builtin_constant_p(x) ?	\
-     __bswap16_constant(x) :			\
-     __bswap16_var(x)))
-
-#define __bswap32(x)	\
-    ((__uint32_t)(__builtin_constant_p(x) ? 	\
-     __bswap32_constant(x) :			\
-     __bswap32_var(x)))
-
-#else
-#define __bswap16(x)	__bswap16_var(x)
-#define __bswap32(x)	__bswap32_var(x)
-
-#endif /* __OPTIMIZE__ */
-#endif /* !_ENDIAN_H_ */
+#endif /* !_MACHINE_ENDIAN_H_ */
diff --git a/sys/arm64/include/endian.h b/sys/arm64/include/endian.h
index 8cb5c6976b3..0f06010b7e4 100644
--- a/sys/arm64/include/endian.h
+++ b/sys/arm64/include/endian.h
@@ -34,89 +34,6 @@
 #define	_MACHINE_ENDIAN_H_
 
 #include <sys/_types.h>
+#include <sys/_endian.h>
 
-/*
- * Definitions for byte order, according to byte significance from low
- * address to high.
- */
-#define	_LITTLE_ENDIAN  1234    /* LSB first: i386, vax */
-#define	_BIG_ENDIAN     4321    /* MSB first: 68000, ibm, net */
-#define	_PDP_ENDIAN     3412    /* LSB first in word, MSW first in long */
-
-#define	_BYTE_ORDER	_LITTLE_ENDIAN
-
-#if __BSD_VISIBLE
-#define	LITTLE_ENDIAN   _LITTLE_ENDIAN
-#define	BIG_ENDIAN      _BIG_ENDIAN
-#define	PDP_ENDIAN      _PDP_ENDIAN
-#define	BYTE_ORDER      _BYTE_ORDER
-#endif
-
-#define	_QUAD_HIGHWORD  1
-#define	_QUAD_LOWWORD 0
-#define	__ntohl(x)        (__bswap32(x))
-#define	__ntohs(x)        (__bswap16(x))
-#define	__htonl(x)        (__bswap32(x))
-#define	__htons(x)        (__bswap16(x))
-
-static __inline __uint64_t
-__bswap64(__uint64_t x)
-{
-	__uint64_t ret;
-
-	__asm __volatile("rev %0, %1\n"
-			 : "=&r" (ret), "+r" (x));
-
-	return (ret);
-}
-
-static __inline __uint32_t
-__bswap32_var(__uint32_t v)
-{
-	__uint32_t ret;
-
-	__asm __volatile("rev32 %x0, %x1\n"
-			 : "=&r" (ret), "+r" (v));
-
-	return (ret);
-}
-
-static __inline __uint16_t
-__bswap16_var(__uint16_t v)
-{
-	__uint32_t ret;
-
-	__asm __volatile("rev16 %w0, %w1\n"
-			 : "=&r" (ret), "+r" (v));
-
-	return ((__uint16_t)ret);
-}		
-
-#ifdef __OPTIMIZE__
-
-#define	__bswap32_constant(x)	\
-    ((((x) & 0xff000000U) >> 24) |	\
-     (((x) & 0x00ff0000U) >>  8) |	\
-     (((x) & 0x0000ff00U) <<  8) |	\
-     (((x) & 0x000000ffU) << 24))
-
-#define	__bswap16_constant(x)	\
-    ((((x) & 0xff00) >> 8) |		\
-     (((x) & 0x00ff) << 8))
-
-#define	__bswap16(x)	\
-    ((__uint16_t)(__builtin_constant_p(x) ?	\
-     __bswap16_constant((__uint16_t)(x)) :	\
-     __bswap16_var(x)))
-
-#define	__bswap32(x)	\
-    ((__uint32_t)(__builtin_constant_p(x) ? 	\
-     __bswap32_constant((__uint32_t)(x)) :	\
-     __bswap32_var(x)))
-
-#else
-#define	__bswap16(x)	__bswap16_var(x)
-#define	__bswap32(x)	__bswap32_var(x)
-
-#endif /* __OPTIMIZE__ */
 #endif /* !_MACHINE_ENDIAN_H_ */
diff --git a/sys/mips/include/endian.h b/sys/mips/include/endian.h
index 9faf60e9667..57f76445a9c 100644
--- a/sys/mips/include/endian.h
+++ b/sys/mips/include/endian.h
@@ -39,110 +39,6 @@
 #ifndef	__ASSEMBLER__
 #include <sys/_types.h>
 #endif
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/*
- * Definitions for byte order, according to byte significance from low
- * address to high.
- */
-#define	_LITTLE_ENDIAN	1234	/* LSB first: i386, vax */
-#define	_BIG_ENDIAN	4321	/* MSB first: 68000, ibm, net */
-#define	_PDP_ENDIAN	3412	/* LSB first in word, MSW first in long */
-
-#ifdef __MIPSEB__
-#define	_BYTE_ORDER	_BIG_ENDIAN
-#else
-#define _BYTE_ORDER	_LITTLE_ENDIAN
-#endif /* __MIBSEB__ */
-
-/*
- * Deprecated variants that don't have enough underscores to be useful in more
- * strict namespaces.
- */
-#if __BSD_VISIBLE
-#define	LITTLE_ENDIAN	_LITTLE_ENDIAN
-#define	BIG_ENDIAN	_BIG_ENDIAN
-#define	PDP_ENDIAN	_PDP_ENDIAN
-#define	BYTE_ORDER	_BYTE_ORDER
-#endif
-
-#ifndef __ASSEMBLER__
-#if defined(__GNUCLIKE_BUILTIN_CONSTANT_P) && defined(__OPTIMIZE__)
-#define	__is_constant(x)	__builtin_constant_p(x)
-#else
-#define	__is_constant(x)	0
-#endif
-
-#define	__bswap16_const(x)	(((x) >> 8) | (((x) << 8) & 0xff00))
-#define	__bswap32_const(x)	(((x) >> 24) | (((x) >> 8) & 0xff00) |	\
-	(((x) << 8) & 0xff0000) | (((x) << 24) & 0xff000000))
-#define	__bswap64_const(x)	(((x) >> 56) | (((x) >> 40) & 0xff00) |	\
-	(((x) >> 24) & 0xff0000) | (((x) >> 8) & 0xff000000) |		\
-	(((x) << 8) & ((__uint64_t)0xff << 32)) |			\
-	(((x) << 24) & ((__uint64_t)0xff << 40)) |			\
-	(((x) << 40) & ((__uint64_t)0xff << 48)) | (((x) << 56)))
-
-static __inline __uint16_t
-__bswap16_var(__uint16_t _x)
-{
-
-	return ((_x >> 8) | ((_x << 8) & 0xff00));
-}
-
-static __inline __uint32_t
-__bswap32_var(__uint32_t _x)
-{
-
-	return ((_x >> 24) | ((_x >> 8) & 0xff00) | ((_x << 8) & 0xff0000) |
-	    ((_x << 24) & 0xff000000));
-}
-
-static __inline __uint64_t
-__bswap64_var(__uint64_t _x)
-{
-
-	return ((_x >> 56) | ((_x >> 40) & 0xff00) | ((_x >> 24) & 0xff0000) |
-	    ((_x >> 8) & 0xff000000) | ((_x << 8) & ((__uint64_t)0xff << 32)) |
-	    ((_x << 24) & ((__uint64_t)0xff << 40)) |
-	    ((_x << 40) & ((__uint64_t)0xff << 48)) | ((_x << 56)));
-}
-
-#define	__bswap16(x)	((__uint16_t)(__is_constant((x)) ?		\
-	__bswap16_const((__uint16_t)(x)) :  __bswap16_var((__uint16_t)(x))))
-#define	__bswap32(x)	((__uint32_t)(__is_constant((x)) ?		\
-	__bswap32_const((__uint32_t)(x)) :  __bswap32_var((__uint32_t)(x))))
-#define	__bswap64(x)	((__uint64_t)(__is_constant((x)) ?		\
-	__bswap64_const((__uint64_t)(x)) :  __bswap64_var((__uint64_t)(x))))
-
-#ifdef __MIPSEB__
-#define	__htonl(x)	((__uint32_t)(x))
-#define	__htons(x)	((__uint16_t)(x))
-#define	__ntohl(x)	((__uint32_t)(x))
-#define	__ntohs(x)	((__uint16_t)(x))	
-/*
- * Define the order of 32-bit words in 64-bit words.
- */
-/*
- * XXXMIPS: Additional parentheses to make gcc more happy.
- */
-#define _QUAD_HIGHWORD 0
-#define _QUAD_LOWWORD 1
-#else
-#define _QUAD_HIGHWORD  1
-#define _QUAD_LOWWORD 0
-#define __ntohl(x)	(__bswap32((x)))
-#define __ntohs(x)	(__bswap16((x)))
-#define __htonl(x)	(__bswap32((x)))
-#define __htons(x)	(__bswap16((x)))
-#endif /* _MIPSEB */
-
-#endif /* _ASSEMBLER_ */
-
-#ifdef __cplusplus
-}
-#endif
+#include <sys/_endian.h>
 
 #endif /* !_MACHINE_ENDIAN_H_ */
diff --git a/sys/powerpc/include/endian.h b/sys/powerpc/include/endian.h
index 8cbd7e024eb..9e28237bfd2 100644
--- a/sys/powerpc/include/endian.h
+++ b/sys/powerpc/include/endian.h
@@ -35,20 +35,8 @@
 #ifndef _MACHINE_ENDIAN_H_
 #define	_MACHINE_ENDIAN_H_
 
-#include <sys/cdefs.h>
 #include <sys/_types.h>
 
-/*
- * Define the order of 32-bit words in 64-bit words.
- */
-#ifdef __LITTLE_ENDIAN__
-#define	_QUAD_HIGHWORD 1
-#define	_QUAD_LOWWORD 0
-#else
-#define	_QUAD_HIGHWORD 0
-#define	_QUAD_LOWWORD 1
-#endif
-
 /*
  * GCC defines _BIG_ENDIAN and _LITTLE_ENDIAN equal to __BIG_ENDIAN__
  * and __LITTLE_ENDIAN__ (resp).
@@ -60,94 +48,6 @@
 #undef _LITTLE_ENDIAN
 #endif
 
-/*
- * Definitions for byte order, according to byte significance from low
- * address to high.
- */
-#define	_LITTLE_ENDIAN	1234	/* LSB first: i386, vax */
-#define	_BIG_ENDIAN	4321	/* MSB first: 68000, ibm, net */
-#define	_PDP_ENDIAN	3412	/* LSB first in word, MSW first in long */
-
-#ifdef __LITTLE_ENDIAN__
-#define	_BYTE_ORDER	_LITTLE_ENDIAN
-#else
-#define	_BYTE_ORDER	_BIG_ENDIAN
-#endif
-
-/*
- * Deprecated variants that don't have enough underscores to be useful in more
- * strict namespaces.
- */
-#if __BSD_VISIBLE
-#define	LITTLE_ENDIAN	_LITTLE_ENDIAN
-#define	BIG_ENDIAN	_BIG_ENDIAN
-#define	PDP_ENDIAN	_PDP_ENDIAN
-#define	BYTE_ORDER	_BYTE_ORDER
-#endif
-
-#if defined(__GNUCLIKE_BUILTIN_CONSTANT_P)
-#define	__is_constant(x)	__builtin_constant_p(x)
-#else
-#define	__is_constant(x)	0
-#endif
-
-#define	__bswap16_const(x)	((((__uint16_t)(x) >> 8) & 0xff) |	\
-	(((__uint16_t)(x) << 8) & 0xff00))
-#define	__bswap32_const(x)	((((__uint32_t)(x) >> 24) & 0xff) |	\
-	(((__uint32_t)(x) >> 8) & 0xff00) |				\
-	(((__uint32_t)(x)<< 8) & 0xff0000) |				\
-	(((__uint32_t)(x) << 24) & 0xff000000))
-#define	__bswap64_const(x)	((((__uint64_t)(x) >> 56) & 0xff) |	\
-	(((__uint64_t)(x) >> 40) & 0xff00) |				\
-	(((__uint64_t)(x) >> 24) & 0xff0000) |				\
-	(((__uint64_t)(x) >> 8) & 0xff000000) |				\
-	(((__uint64_t)(x) << 8) & ((__uint64_t)0xff << 32)) |		\
-	(((__uint64_t)(x) << 24) & ((__uint64_t)0xff << 40)) |		\
-	(((__uint64_t)(x) << 40) & ((__uint64_t)0xff << 48)) |		\
-	(((__uint64_t)(x) << 56) & ((__uint64_t)0xff << 56)))
-
-static __inline __uint16_t
-__bswap16_var(__uint16_t _x)
-{
-
-	return ((_x >> 8) | ((_x << 8) & 0xff00));
-}
-
-static __inline __uint32_t
-__bswap32_var(__uint32_t _x)
-{
-
-	return ((_x >> 24) | ((_x >> 8) & 0xff00) | ((_x << 8) & 0xff0000) |
-	    ((_x << 24) & 0xff000000));
-}
-
-static __inline __uint64_t
-__bswap64_var(__uint64_t _x)
-{
-
-	return ((_x >> 56) | ((_x >> 40) & 0xff00) | ((_x >> 24) & 0xff0000) |
-	    ((_x >> 8) & 0xff000000) | ((_x << 8) & ((__uint64_t)0xff << 32)) |
-	    ((_x << 24) & ((__uint64_t)0xff << 40)) |
-	    ((_x << 40) & ((__uint64_t)0xff << 48)) | ((_x << 56)));
-}
-
-#define	__bswap16(x)	((__uint16_t)(__is_constant(x) ? __bswap16_const(x) : \
-	__bswap16_var(x)))
-#define	__bswap32(x)	(__is_constant(x) ? __bswap32_const(x) : \
-	__bswap32_var(x))
-#define	__bswap64(x)	(__is_constant(x) ? __bswap64_const(x) : \
-	__bswap64_var(x))
-
-#ifdef __LITTLE_ENDIAN__
-#define	__htonl(x)	(__bswap32((__uint32_t)(x)))
-#define	__htons(x)	(__bswap16((__uint16_t)(x)))
-#define	__ntohl(x)	(__bswap32((__uint32_t)(x)))
-#define	__ntohs(x)	(__bswap16((__uint16_t)(x)))
-#else
-#define	__htonl(x)	((__uint32_t)(x))
-#define	__htons(x)	((__uint16_t)(x))
-#define	__ntohl(x)	((__uint32_t)(x))
-#define	__ntohs(x)	((__uint16_t)(x))
-#endif
+#include <sys/_endian.h>
 
 #endif /* !_MACHINE_ENDIAN_H_ */
diff --git a/sys/riscv/include/endian.h b/sys/riscv/include/endian.h
index 25516fa0136..0f06010b7e4 100644
--- a/sys/riscv/include/endian.h
+++ b/sys/riscv/include/endian.h
@@ -34,91 +34,6 @@
 #define	_MACHINE_ENDIAN_H_
 
 #include <sys/_types.h>
+#include <sys/_endian.h>
 
-/*
- * Definitions for byte order, according to byte significance from low
- * address to high.
- */
-#define	_LITTLE_ENDIAN  1234    /* LSB first: i386, vax */
-#define	_BIG_ENDIAN     4321    /* MSB first: 68000, ibm, net */
-#define	_PDP_ENDIAN     3412    /* LSB first in word, MSW first in long */
-
-#define	_BYTE_ORDER	_LITTLE_ENDIAN
-
-#if __BSD_VISIBLE
-#define	LITTLE_ENDIAN   _LITTLE_ENDIAN
-#define	BIG_ENDIAN      _BIG_ENDIAN
-#define	PDP_ENDIAN      _PDP_ENDIAN
-#define	BYTE_ORDER      _BYTE_ORDER
-#endif
-
-#define	_QUAD_HIGHWORD  1
-#define	_QUAD_LOWWORD 0
-#define	__ntohl(x)        (__bswap32(x))
-#define	__ntohs(x)        (__bswap16(x))
-#define	__htonl(x)        (__bswap32(x))
-#define	__htons(x)        (__bswap16(x))
-
-static __inline __uint64_t
-__bswap64(__uint64_t _x)
-{
-	__uint64_t ret;
-
-	ret = (_x >> 56);
-	ret |= ((_x >> 40) & 0xff00);
-	ret |= ((_x >> 24) & 0xff0000);
-	ret |= ((_x >>  8) & 0xff000000);
-	ret |= ((_x <<  8) & ((__uint64_t)0xff << 32));
-	ret |= ((_x << 24) & ((__uint64_t)0xff << 40));
-	ret |= ((_x << 40) & ((__uint64_t)0xff << 48));
-	ret |= (_x << 56);
-
-	return (ret);
-}
-
-static __inline __uint32_t
-__bswap32_var(__uint32_t _x)
-{
-
-	return ((_x >> 24) | ((_x >> 8) & 0xff00) | ((_x << 8) & 0xff0000) | 
-	    ((_x << 24) & 0xff000000));
-}
-
-static __inline __uint16_t
-__bswap16_var(__uint16_t _x)
-{
-	__uint32_t ret;
-
-	ret = ((_x >> 8) | ((_x << 8) & 0xff00));
-
-	return ((__uint16_t)ret);
-}
-
-#ifdef __OPTIMIZE__
-
-#define	__bswap32_constant(x)	\
-    ((((x) & 0xff000000U) >> 24) |	\
-     (((x) & 0x00ff0000U) >>  8) |	\
-     (((x) & 0x0000ff00U) <<  8) |	\
-     (((x) & 0x000000ffU) << 24))
-
-#define	__bswap16_constant(x)	\
-    ((((x) & 0xff00) >> 8) |		\
-     (((x) & 0x00ff) << 8))
-
-#define	__bswap16(x)	\
-    ((__uint16_t)(__builtin_constant_p(x) ?	\
-     __bswap16_constant(x) :			\
-     __bswap16_var(x)))
-
-#define	__bswap32(x)	\
-    ((__uint32_t)(__builtin_constant_p(x) ? 	\
-     __bswap32_constant(x) :			\
-     __bswap32_var(x)))
-
-#else
-#define	__bswap16(x)	__bswap16_var(x)
-#define	__bswap32(x)	__bswap32_var(x)
-
-#endif /* __OPTIMIZE__ */
 #endif /* !_MACHINE_ENDIAN_H_ */
diff --git a/sys/sys/_endian.h b/sys/sys/_endian.h
new file mode 100644
index 00000000000..936962cc729
--- /dev/null
+++ b/sys/sys/_endian.h
@@ -0,0 +1,92 @@
+/*-
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ * Copyright (c) 1987, 1991 Regents of the University of California.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SYS__ENDIAN_H_
+#define	_SYS__ENDIAN_H_
+
+#ifndef _MACHINE_ENDIAN_H_
+#error "sys/_endian.h should not be included directly"
+#endif
+
+/* BSD Compatibility */
+#define	_BYTE_ORDER	__BYTE_ORDER__
+
+/*
+ * Definitions for byte order, according to byte significance from low
+ * address to high.
+ */
+#define	_LITTLE_ENDIAN	__ORDER_LITTLE_ENDIAN__ /* LSB first: 1234 */
+#define	_BIG_ENDIAN	__ORDER_BIG_ENDIAN__    /* MSB first: 4321 */
+#define	_PDP_ENDIAN	__ORDER_PDP_ENDIAN__    /* LSB first in word,
+						 * MSW first in long: 3412 */
+
+/*
+ * Define the order of 32-bit words in 64-bit words.
+ */
+#if _BYTE_ORDER == _LITTLE_ENDIAN
+#define	_QUAD_HIGHWORD	1
+#define	_QUAD_LOWWORD	0
+#elif _BYTE_ORDER == _BIG_ENDIAN
+#define	_QUAD_HIGHWORD	0
+#define	_QUAD_LOWWORD	1
+#else
+#error "Unsupported endian"
+#endif
+
+/*
+ * Deprecated variants that don't have enough underscores to be useful in more
+ * strict namespaces.
+ */
+#if __BSD_VISIBLE
+#define	LITTLE_ENDIAN   _LITTLE_ENDIAN
+#define	BIG_ENDIAN      _BIG_ENDIAN
+#define	PDP_ENDIAN      _PDP_ENDIAN
+#define	BYTE_ORDER      _BYTE_ORDER
+#endif
+
+/* bswap primitives, based on compiler builtins */
+#define	__bswap16(x)	__builtin_bswap16(x)
+#define	__bswap32(x)	__builtin_bswap32(x)
+#define	__bswap64(x)	__builtin_bswap64(x)
+
+#if _BYTE_ORDER == _LITTLE_ENDIAN
+#define	__ntohl(x)	(__bswap32(x))
+#define	__ntohs(x)	(__bswap16(x))
+#define	__htonl(x)	(__bswap32(x))
+#define	__htons(x)	(__bswap16(x))
+#elif _BYTE_ORDER == _BIG_ENDIAN
+#define	__htonl(x)	((__uint32_t)(x))
+#define	__htons(x)	((__uint16_t)(x))
+#define	__ntohl(x)	((__uint32_t)(x))
+#define	__ntohs(x)	((__uint16_t)(x))
+#endif
+
+#endif /* _SYS__ENDIAN_H_ */
diff --git a/sys/x86/include/endian.h b/sys/x86/include/endian.h
index 18d52fb8a6f..8fb24881145 100644
--- a/sys/x86/include/endian.h
+++ b/sys/x86/include/endian.h
@@ -35,43 +35,7 @@
 #ifndef _MACHINE_ENDIAN_H_
 #define	_MACHINE_ENDIAN_H_
 
-#include <sys/cdefs.h>
 #include <sys/_types.h>
-
-/*
- * Define the order of 32-bit words in 64-bit words.
- */
-#define	_QUAD_HIGHWORD 1
-#define	_QUAD_LOWWORD 0
-
-/*
- * Definitions for byte order, according to byte significance from low
- * address to high.
- */
-#define	_LITTLE_ENDIAN	1234	/* LSB first: i386, vax */
-#define	_BIG_ENDIAN	4321	/* MSB first: 68000, ibm, net */
-#define	_PDP_ENDIAN	3412	/* LSB first in word, MSW first in long */
-
-#define	_BYTE_ORDER	_LITTLE_ENDIAN
-
-/*
- * Deprecated variants that don't have enough underscores to be useful in more
- * strict namespaces.
- */
-#if __BSD_VISIBLE
-#define	LITTLE_ENDIAN	_LITTLE_ENDIAN
-#define	BIG_ENDIAN	_BIG_ENDIAN
-#define	PDP_ENDIAN	_PDP_ENDIAN
-#define	BYTE_ORDER	_BYTE_ORDER
-#endif
-
-#define	__bswap16(x)	__builtin_bswap16(x)
-#define	__bswap32(x)	__builtin_bswap32(x)
-#define	__bswap64(x)	__builtin_bswap64(x)
-
-#define	__htonl(x)	__bswap32(x)
-#define	__htons(x)	__bswap16(x)
-#define	__ntohl(x)	__bswap32(x)
-#define	__ntohs(x)	__bswap16(x)
+#include <sys/_endian.h>
 
 #endif /* !_MACHINE_ENDIAN_H_ */
