#!/bin/sh
if [ ! $BSD_CONF_VERSION ]; then . /etc/.bsdconf; fi
if [ -z $GOO ]; then GOO=/usr/local/goo; fi
golang_goo() {
	if [ ! -x $GOO/.goo ]; then
		umount -f /usr/local/goo > /dev/null 2>&1
		mkdir -p /usr/local/goo
		if [ -e $BSD_PKG/all/goo.uzst ]; then
			/usr/bin/mdconfig -d -u $BSD_MD_GOV -o force > /dev/null 2>&1
			/usr/bin/mdconfig -u $BSD_MD_GOV -f $BSD_PKG/all/goo.uzst
			/usr/bin/mount -o ro /dev/$BSD_MD_GOV.uzip $GOO
		elif [ -e $BSD_PKG/all/goo.sqfs ]; then
			/usr/bin/squashfuse $BSD_PKG/all/goo.sqfs $GOO
		else
			echo "no goo img found in store, exit" && exit
		fi
		echo "... [done] mount /usr/local/goo"
	fi
}
golang_live_check() {
	if [ -x /usr/local/go/bin/go ]; then golang_goo && exit; fi
	if [ ! -e $BSD_PKG/fbsd.$ARCH_L1.$ARCH_L2.$ARCH_L3/go.img ]; then echo "... go.img found for your hw/os !" && exit 1; fi
	sh /etc/action/store drop.golang
}
golang_live_mount() {
	for TDIR in go go.cache go.modcache; do
		mkdir -p /usr/local/$TDIR
	done
	mdconfig -u $BSD_MD_GO -f $BSD_PKG/fbsd.$ARCH_L1.$ARCH_L2.$ARCH_L3/go.img
	mount -o ro /dev/$BSD_MD_GO.uzip /usr/local/go
	if [ ! -x /usr/local/go/bin/go ]; then
		echo "... go.img fallback!"
		sh /etc/action/store drop.golang
		mkdir -p /usr/local/go
		mdconfig -u $BSD_MD_GO -f $BSD_PKG/fbsd.$ARCH_L1.$ARCH_L2.$ARCH_L3/go.img-stable
		mount -o ro /dev/$BSD_MD_GO.uzip /usr/local/go
	fi
	ln -fs /usr/local/go/bin/go /usr/local/bin/go
	mkdir -p $GOCACHE $GOTMPDIR $GOMODCACHE
	touch /var/lock.pkg.go
	echo "... [done] mount /usr/local/go"
}
golang_live_check
golang_live_mount
golang_goo
exit
#########################################################################
