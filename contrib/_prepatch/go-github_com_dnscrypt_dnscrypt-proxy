### ( 2023-03-14 ) ( 1678798076 ) ### DO NOT EDIT ### auto-generated file / patchset by <appliance-builder/enhanced> ###
--- ./dnscrypt-proxy/config.go.orig	1970-01-01 00:00:00.000000000 +0000
+++ ./dnscrypt-proxy/config.go	1970-01-01 00:00:00.000000000 +0000
@@ -379,7 +379,7 @@
 	proxy.xTransport.tlsDisableSessionTickets = config.TLSDisableSessionTickets
 	proxy.xTransport.tlsCipherSuite = config.TLSCipherSuite
 	proxy.xTransport.mainProto = proxy.mainProto
-	proxy.xTransport.http3 = config.HTTP3
+	//proxy.xTransport.http3 = config.HTTP3
 	if len(config.BootstrapResolvers) == 0 && len(config.BootstrapResolversLegacy) > 0 {
 		dlog.Warnf("fallback_resolvers was renamed to bootstrap_resolvers - Please update your configuration")
 		config.BootstrapResolvers = config.BootstrapResolversLegacy
--- ./dnscrypt-proxy/xtransport.go.orig	1970-01-01 00:00:00.000000000 +0000
+++ ./dnscrypt-proxy/xtransport.go	1970-01-01 00:00:00.000000000 +0000
@@ -22,7 +22,7 @@
 
 	"github.com/jedisct1/dlog"
 	stamps "github.com/jedisct1/go-dnsstamps"
-	"github.com/lucas-clemente/quic-go/http3"
+	// "github.com/lucas-clemente/quic-go/http3"
 	"github.com/miekg/dns"
 	"golang.org/x/net/http2"
 	netproxy "golang.org/x/net/proxy"
@@ -54,7 +54,7 @@
 
 type XTransport struct {
 	transport                *http.Transport
-	h3Transport              *http3.RoundTripper
+	// h3Transport              *http3.RoundTripper
 	keepAlive                time.Duration
 	timeout                  time.Duration
 	cachedIPs                CachedIPs
@@ -64,7 +64,7 @@
 	ignoreSystemDNS          bool
 	useIPv4                  bool
 	useIPv6                  bool
-	http3                    bool
+	// http3                    bool
 	tlsDisableSessionTickets bool
 	tlsCipherSuite           []uint16
 	proxyDialer              *netproxy.Dialer
@@ -185,14 +185,14 @@
 		certPool.AppendCertsFromPEM(additionalCaCert)
 	}
 
-	if certPool != nil {
-		// Some operating systems don't include Let's Encrypt ISRG Root X1 certificate yet
-		var letsEncryptX1Cert = []byte(`-----BEGIN CERTIFICATE-----
- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAwTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2VhcmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJuZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBYMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygch77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6UA5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sWT8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyHB5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UCB5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUvKBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWnOlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTnjh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbwqHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CIrU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkqhkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZLubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KKNFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7UrTkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdCjNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVcoyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPAmRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57demyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=
- -----END CERTIFICATE-----`)
-		certPool.AppendCertsFromPEM(letsEncryptX1Cert)
-		tlsClientConfig.RootCAs = certPool
-	}
+// 	if certPool != nil {
+// 		// Some operating systems don't include Let's Encrypt ISRG Root X1 certificate yet
+// 		var letsEncryptX1Cert = []byte(`-----BEGIN CERTIFICATE-----
+//  MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAwTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2VhcmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJuZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBYMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygch77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6UA5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sWT8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyHB5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UCB5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUvKBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWnOlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTnjh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbwqHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CIrU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkqhkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZLubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KKNFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7UrTkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdCjNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVcoyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPAmRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57demyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=
+//  -----END CERTIFICATE-----`)
+// 		certPool.AppendCertsFromPEM(letsEncryptX1Cert)
+// 		tlsClientConfig.RootCAs = certPool
+// 	}
 
 	if clientCreds.clientCert != "" {
 		cert, err := tls.LoadX509KeyPair(clientCreds.clientCert, clientCreds.clientKey)
@@ -222,10 +222,10 @@
 		http2Transport.AllowHTTP = false
 	}
 	xTransport.transport = transport
-	if xTransport.http3 {
-		h3Transport := &http3.RoundTripper{DisableCompression: true, TLSClientConfig: &tlsClientConfig}
-		xTransport.h3Transport = h3Transport
-	}
+// 	if xTransport.http3 {
+// 		h3Transport := &http3.RoundTripper{DisableCompression: true, TLSClientConfig: &tlsClientConfig}
+// 		xTransport.h3Transport = h3Transport
+// 	}
 }
 
 func (xTransport *XTransport) resolveUsingSystem(host string) (ip net.IP, ttl time.Duration, err error) {
@@ -397,19 +397,19 @@
 		Transport: xTransport.transport,
 		Timeout:   timeout,
 	}
-	host, port := ExtractHostAndPort(url.Host, 443)
-	hasAltSupport := false
-	if xTransport.h3Transport != nil {
-		xTransport.altSupport.RLock()
-		altPort, hasAltSupport := xTransport.altSupport.cache[url.Host]
-		xTransport.altSupport.RUnlock()
-		if hasAltSupport {
-			if int(altPort) == port {
-				client.Transport = xTransport.h3Transport
-				dlog.Debugf("Using HTTP/3 transport for [%s]", url.Host)
-			}
-		}
-	}
+ 	host, _ := ExtractHostAndPort(url.Host, 443)
+// 	hasAltSupport := false
+// 	if xTransport.h3Transport != nil {
+// 		xTransport.altSupport.RLock()
+// 		altPort, hasAltSupport := xTransport.altSupport.cache[url.Host]
+// 		xTransport.altSupport.RUnlock()
+// 		if hasAltSupport {
+// 			if int(altPort) == port {
+// 				client.Transport = xTransport.h3Transport
+// 				dlog.Debugf("Using HTTP/3 transport for [%s]", url.Host)
+// 			}
+// 		}
+// 	}
 	header := map[string][]string{"User-Agent": {"dnscrypt-proxy"}}
 	if len(accept) > 0 {
 		header["Accept"] = []string{accept}
@@ -473,32 +473,32 @@
 		}
 		return nil, statusCode, nil, rtt, err
 	}
-	if xTransport.h3Transport != nil && !hasAltSupport {
-		if alt, found := resp.Header["Alt-Svc"]; found {
-			dlog.Debugf("Alt-Svc [%s]: [%s]", url.Host, alt)
-			altPort := uint16(port)
-			for i, xalt := range alt {
-				for j, v := range strings.Split(xalt, ";") {
-					if i > 8 || j > 16 {
-						break
-					}
-					v = strings.TrimSpace(v)
-					if strings.HasPrefix(v, "h3=\":") {
-						v = strings.TrimPrefix(v, "h3=\":")
-						v = strings.TrimSuffix(v, "\"")
-						if xAltPort, err := strconv.ParseUint(v, 10, 16); err == nil && xAltPort <= 65536 {
-							altPort = uint16(xAltPort)
-							dlog.Debugf("Using HTTP/3 for [%s]", url.Host)
-							break
-						}
-					}
-				}
-			}
-			xTransport.altSupport.Lock()
-			xTransport.altSupport.cache[url.Host] = altPort
-			xTransport.altSupport.Unlock()
-		}
-	}
+// 	if xTransport.h3Transport != nil && !hasAltSupport {
+// 		if alt, found := resp.Header["Alt-Svc"]; found {
+// 			dlog.Debugf("Alt-Svc [%s]: [%s]", url.Host, alt)
+// 			altPort := uint16(port)
+// 			for i, xalt := range alt {
+// 				for j, v := range strings.Split(xalt, ";") {
+// 					if i > 8 || j > 16 {
+// 						break
+// 					}
+// 					v = strings.TrimSpace(v)
+// 					if strings.HasPrefix(v, "h3=\":") {
+// 						v = strings.TrimPrefix(v, "h3=\":")
+// 						v = strings.TrimSuffix(v, "\"")
+// 						if xAltPort, err := strconv.ParseUint(v, 10, 16); err == nil && xAltPort <= 65536 {
+// 							altPort = uint16(xAltPort)
+// 							dlog.Debugf("Using HTTP/3 for [%s]", url.Host)
+// 							break
+// 						}
+// 					}
+// 				}
+// 			}
+// 			xTransport.altSupport.Lock()
+// 			xTransport.altSupport.cache[url.Host] = altPort
+// 			xTransport.altSupport.Unlock()
+// 		}
+// 	}
 	tls := resp.TLS
 	bin, err := ioutil.ReadAll(io.LimitReader(resp.Body, MaxHTTPBodyLength))
 	if err != nil {
